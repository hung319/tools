#!/bin/bash

set -e

# === CONFIG ===
# Phi√™n b·∫£n c·ªßa c√°c ph·∫ßn m·ªÅm
PG_VERSION="16.3"
OPENSSL_VERSION="1.1.1w" # C·∫≠p nh·∫≠t phi√™n b·∫£n OpenSSL
LIBXML2_VERSION="2.12.7" # C·∫≠p nh·∫≠t phi√™n b·∫£n libxml2
NSS_WRAPPER_VERSION="1.1.15"

### THAY ƒê·ªîI: C·∫•u tr√∫c l·∫°i to√†n b·ªô ƒë∆∞·ªùng d·∫´n theo y√™u c·∫ßu ###

# Th∆∞ m·ª•c ch·ª©a m√£ ngu·ªìn t·∫£i v·ªÅ ƒë·ªÉ bi√™n d·ªãch
SRC_DIR="$HOME/src"

# Th∆∞ m·ª•c c√†i ƒë·∫∑t cho PostgreSQL v√† c√°c th∆∞ vi·ªán ph·ª• thu·ªôc (bin, lib, include, etc.)
INSTALL_DIR="$HOME/.local"

# Th∆∞ m·ª•c ch·ª©a d·ªØ li·ªáu, c·∫•u h√¨nh, v√† c√°c file runtime c·ªßa PostgreSQL
DATABASE_DIR="$HOME/database/pgsql"
PG_DATA="$DATABASE_DIR/data"
NSS_DIR="$DATABASE_DIR/nss_wrapper" # nss_wrapper l√† m·ªôt ph·∫ßn c·ªßa runtime, ƒë·∫∑t ·ªü ƒë√¢y

# C·∫•u h√¨nh kh√°c
PORT=5432
PG_USER="myuser"
PG_PASSWORD="mypassword" # B·∫°n n√™n thay ƒë·ªïi m·∫≠t kh·∫©u n√†y

# === Setup ===
# T·∫°o c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
echo "üöÄ Chu·∫©n b·ªã c√°c th∆∞ m·ª•c..."
mkdir -p "$SRC_DIR" "$INSTALL_DIR/bin" "$INSTALL_DIR/lib" "$DATABASE_DIR" "$NSS_DIR" "$PG_DATA"

# (T·ªêI ∆ØU) ƒê·∫∑t c√°c bi·∫øn m√¥i tr∆∞·ªùng ƒë·ªÉ tr√¨nh bi√™n d·ªãch v√† runtime t√¨m ƒë√∫ng th∆∞ vi·ªán
export CFLAGS="-I$INSTALL_DIR/include"
export LDFLAGS="-L$INSTALL_DIR/lib -Wl,-rpath,$INSTALL_DIR/lib" # -rpath gi√∫p runtime t√¨m lib
export LD_LIBRARY_PATH="$INSTALL_DIR/lib:$LD_LIBRARY_PATH"
export PATH="$INSTALL_DIR/bin:$PATH"

# --- Build OpenSSL ---
echo "üîé Ki·ªÉm tra OpenSSL..."
if [ ! -f "$INSTALL_DIR/lib/libssl.so" ]; then
    echo "üöÄ OpenSSL ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu build v$OPENSSL_VERSION..."
    cd "$SRC_DIR" ### THAY ƒê·ªîI: l√†m vi·ªác trong th∆∞ m·ª•c src
    curl -LO "https://www.openssl.org/source/openssl-$OPENSSL_VERSION.tar.gz"
    tar -xzf "openssl-$OPENSSL_VERSION.tar.gz"
    cd "openssl-$OPENSSL_VERSION"
    ./config --prefix="$INSTALL_DIR" --openssldir="$INSTALL_DIR/ssl"
    make -j$(nproc)
    make install_sw # Ch·ªâ c√†i ƒë·∫∑t th∆∞ vi·ªán, b·ªè qua docs ƒë·ªÉ nhanh h∆°n
else
    echo "‚úÖ OpenSSL ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua."
fi

# --- Build libxml2 ---
echo "üîé Ki·ªÉm tra libxml2..."
if [ ! -f "$INSTALL_DIR/lib/libxml2.so" ]; then
    echo "üöÄ libxml2 ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu build v$LIBXML2_VERSION..."
    cd "$SRC_DIR" ### THAY ƒê·ªîI: l√†m vi·ªác trong th∆∞ m·ª•c src
    curl -LO "https://download.gnome.org/sources/libxml2/${LIBXML2_VERSION%.*}/libxml2-$LIBXML2_VERSION.tar.xz"
    tar -xf "libxml2-$LIBXML2_VERSION.tar.xz"
    cd "libxml2-$LIBXML2_VERSION"
    ./configure --prefix="$INSTALL_DIR" --without-python
    make -j$(nproc)
    make install
else
    echo "‚úÖ libxml2 ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua."
fi

# --- Download v√† build PostgreSQL ---
echo "üîé Ki·ªÉm tra PostgreSQL..."
### THAY ƒê·ªîI: Ki·ªÉm tra psql ·ªü ƒë∆∞·ªùng d·∫´n c√†i ƒë·∫∑t m·ªõi
if [ ! -f "$INSTALL_DIR/bin/psql" ]; then
    echo "üöÄ PostgreSQL ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu build v$PG_VERSION..."
    cd "$SRC_DIR" ### THAY ƒê·ªîI: l√†m vi·ªác trong th∆∞ m·ª•c src
    curl -LO "https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.gz"
    tar -xzf "postgresql-$PG_VERSION.tar.gz"
    cd "postgresql-$PG_VERSION"

    ### THAY ƒê·ªîI: --prefix tr·ªè th·∫≥ng v√†o INSTALL_DIR (~/.local)
    ./configure --prefix="$INSTALL_DIR" \
      --with-openssl \
      --with-libxml \
      --without-icu

    make -j$(nproc)
    make install

    # Build to√†n b·ªô extension trong contrib
    echo "üöÄ B·∫Øt ƒë·∫ßu build c√°c extension trong contrib..."
    cd contrib
    # V√≤ng l·∫∑p an to√†n h∆°n, b·ªè qua c√°c file kh√¥ng ph·∫£i th∆∞ m·ª•c
    for d in */ ; do
        (cd "$d" && make -j$(nproc) && make install) || echo "‚ö†Ô∏è L·ªói khi build extension $d, b·ªè qua..."
    done
else
    echo "‚úÖ PostgreSQL ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·ªè qua."
fi

# --- Build nss_wrapper ---
NSS_SRC="nss_wrapper-$NSS_WRAPPER_VERSION"
echo "üîé Ki·ªÉm tra nss_wrapper..."
### THAY ƒê·ªîI: Ki·ªÉm tra file .so trong th∆∞ m·ª•c ƒë√≠ch
if [ ! -f "$NSS_DIR/lib/libnss_wrapper.so" ]; then
    echo "üöÄ nss_wrapper ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. B·∫Øt ƒë·∫ßu build..."
    cd "$SRC_DIR" ### THAY ƒê·ªîI: l√†m vi·ªác trong th∆∞ m·ª•c src
    curl -LO "https://ftp.samba.org/pub/cwrap/${NSS_SRC}.tar.gz"
    tar -xzf "${NSS_SRC}.tar.gz"
    cd "$NSS_SRC"
    mkdir -p build && cd build
    ### THAY ƒê·ªîI: C√†i ƒë·∫∑t v√†o th∆∞ m·ª•c ƒë√≠ch trong DATABASE_DIR
    cmake .. -DCMAKE_INSTALL_PREFIX="$NSS_DIR"
    make -j$(nproc)
    make install
else
    echo "‚úÖ nss_wrapper ƒë√£ ƒë∆∞·ª£c build. B·ªè qua."
fi

# --- Fake passwd & group d·ª±a tr√™n PG_USER ---
### THAY ƒê·ªîI: T·∫°o file fake trong DATABASE_DIR
uid=$(id -u)
gid=$(id -g)
echo "$PG_USER:x:$uid:$gid:PostgreSQL User:$HOME:/bin/bash" > "$DATABASE_DIR/passwd.fake"
echo "$PG_USER:x:$gid:" > "$DATABASE_DIR/group.fake"

# --- Export env (runtime) ---
# C·∫≠p nh·∫≠t l·∫°i c√°c bi·∫øn m√¥i tr∆∞·ªùng cho session hi·ªán t·∫°i
export LD_PRELOAD="$NSS_DIR/lib/libnss_wrapper.so"
export NSS_WRAPPER_PASSWD="$DATABASE_DIR/passwd.fake"
export NSS_WRAPPER_GROUP="$DATABASE_DIR/group.fake"
export PGUSER="$PG_USER"
export PGPASSWORD="$PG_PASSWORD"
export PGDATABASE="$PG_USER"
export PGHOST="127.0.0.1" # ƒê·ªïi th√†nh 127.0.0.1 cho an to√†n h∆°n

# --- Add v√†o shell config n·∫øu ch∆∞a c√≥ ---
SHELL_NAME=$(basename "$SHELL")
if [ "$SHE_NAME" = "bash" ]; then
    PROFILE_FILE="$HOME/.bashrc"
elif [ "$SHELL_NAME" = "zsh" ]; then
    PROFILE_FILE="$HOME/.zshrc"
else
    PROFILE_FILE="$HOME/.profile"
fi

### THAY ƒê·ªîI: C·∫≠p nh·∫≠t PATH v√† LD_LIBRARY_PATH cho file c·∫•u h√¨nh shell
EXPORTS=$(cat <<EOF

# PostgreSQL local setup
export LD_PRELOAD="$NSS_DIR/lib/libnss_wrapper.so"
export NSS_WRAPPER_PASSWD="$DATABASE_DIR/passwd.fake"
export NSS_WRAPPER_GROUP="$DATABASE_DIR/group.fake"
export PATH="$INSTALL_DIR/bin:\$PATH"
export LD_LIBRARY_PATH="$INSTALL_DIR/lib:\$LD_LIBRARY_PATH"
export PGUSER="$PG_USER"
export PGPASSWORD="$PG_PASSWORD"
export PGDATABASE="$PG_USER"
export PGHOST="127.0.0.1"
EOF
)

if ! grep -q "NSS_WRAPPER_PASSWD" "$PROFILE_FILE"; then
    echo "üìù ƒê√£ th√™m c·∫•u h√¨nh v√†o $PROFILE_FILE"
    echo "$EXPORTS" >> "$PROFILE_FILE"
fi

# --- Init database cluster ---
if [ ! -f "$PG_DATA/PG_VERSION" ]; then
    echo "üöÄ Kh·ªüi t·∫°o database cluster t·∫°i $PG_DATA..."
    initdb -D "$PG_DATA" --no-locale --encoding=UTF8
else
    echo "‚úÖ Database cluster ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc kh·ªüi t·∫°o."
fi

# --- C·∫•u h√¨nh postgresql.conf ---
echo "üîß C·∫•u h√¨nh postgresql.conf..."
sed -i "s/^#\?port = .*/port = $PORT/" "$PG_DATA/postgresql.conf"
sed -i "s/^#\?listen_addresses = .*/listen_addresses = '*'/" "$PG_DATA/postgresql.conf"

# --- Cho ph√©p remote access ---
if ! grep -q "host    all             all             0.0.0.0/0" "$PG_DATA/pg_hba.conf"; then
    echo "üîß C·∫•u h√¨nh pg_hba.conf cho ph√©p truy c·∫≠p t·ª´ xa..."
    echo "host    all             all             0.0.0.0/0               scram-sha-256" >> "$PG_DATA/pg_hba.conf"
    echo "host    all             all             ::1/128                 scram-sha-256" >> "$PG_DATA/pg_hba.conf"
fi

# --- Start PostgreSQL (wait) ---
echo "üöÄ Kh·ªüi ƒë·ªông PostgreSQL..."
pg_ctl -D "$PG_DATA" -l "$DATABASE_DIR/logfile" -w start

# --- T·∫°o user PostgreSQL v√† DB ---
echo "üë§ T·∫°o role v√† database cho user '$PG_USER'..."
psql -U "$(whoami)" -p $PORT -d postgres -c "DO \$\$ BEGIN IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$PG_USER') THEN CREATE ROLE $PG_USER WITH LOGIN SUPERUSER PASSWORD '$PG_PASSWORD'; ELSE ALTER ROLE $PG_USER WITH PASSWORD '$PG_PASSWORD'; END IF; END \$\$;"

createdb -U "$(whoami)" -p $PORT "$PG_USER" || true
psql -U "$PG_USER" -p "$PORT" -d "$PG_USER" -c "CREATE EXTENSION IF NOT EXISTS pgcrypto;"

echo
echo "‚úÖ PostgreSQL $PG_VERSION ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh th√†nh c√¥ng!"
echo "   - Binaries & Libs ƒë∆∞·ª£c c√†i t·∫°i: $INSTALL_DIR"
echo "   - Data & Config ƒë∆∞·ª£c l∆∞u t·∫°i:   $DATABASE_DIR"
echo "   - M√£ ngu·ªìn ƒë∆∞·ª£c t·∫£i v·ªÅ t·∫°i:      $SRC_DIR"
echo "üîê User: $PG_USER | Password: $PG_PASSWORD"
echo "üì¶ Extension 'pgcrypto' ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t."
echo "üí° ƒê·ªÉ s·ª≠ d·ª•ng ngay, h√£y ch·∫°y: source $PROFILE_FILE"
echo "üëâ ƒê·ªÉ kh·ªüi ƒë·ªông server sau n√†y: pg_ctl -D $PG_DATA start"
echo "üëâ ƒê·ªÉ d·ª´ng server: pg_ctl -D $PG_DATA stop"
